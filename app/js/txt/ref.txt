AngularJS之Factory vs Service vs Provider
http://www.linuxeden.com/html/news/20140509/151538.html




http://stackoverflow.com/questions/16826260/dhtmlx-and-angular-js-integration
<dhtmlxgrid ht='500'
              width='800'
              theme='dhx_skyblue'
              header1='"contact list,#cspan,#cspan,#cspan,#cspan,#cspan"'
              header2='"id,title,author,price,in stock,date"'
              colwidths='"100,200,150,100,75,150"'
              colalignments='"center,center,center,center,center,center"'
              coltypes='"ro,ro,ro,ro,ro,ro"'
              colsorting='"int,str,str,currency,int,date"'></dhtmlxgrid>

 angular.module("MyGridDirective", []).directive("dhtmlxgrid", () ->
  restrict: 'E'
  replace: true
  templateUrl: "/partials/dhtmlx.html"
  scope:
    theme: "="
    ht: "="
    width: "="
    header1: "="
    header2: "="
    colwidths: "="
    colalignments: "="
    coltypes: "="
    colsorting: "="

  link: (scope, element, attrs) ->
    scope.data = {rows:  [
      {id: 1001, data: ["100", "A Time to Kill No ONE!", "John Grisham", "12.99", "1", "05/01/1998"]},
      {id: 1002, data: ["1000", "Blood and Smoke", "Stephen King", "0", "1", "01/01/2000"]},
      {id: 1003, data: ["-200", "The Rainmaker", "John Grisham", "7.99", "0", "12/01/2001"]},
      {id: 1004, data: ["350", "The Green Mile", "Stephen King", "11.10", "1", "01/01/1992"]}
    ]}

    refreshChart = (scope) ->
      scope.mygrid = new dhtmlXGridObject("gridbox")
      scope.mygrid.setImagePath "/images/dhtmlx/imgs/"
      scope.mygrid.setHeader scope.header1
      scope.mygrid.attachHeader scope.header2
      scope.mygrid.setInitWidths scope.colwidths
      scope.mygrid.setColAlign scope.colalignments
      scope.mygrid.setColTypes scope.coltypes
      scope.mygrid.setColSorting scope.colsorting
      scope.mygrid.init()
      scope.mygrid.setSkin scope.theme
      scope.mygrid.parse scope.data, "json"

    refreshChart(scope)

)

app.directive('jqGrid', function () {
        return {
            restrict: 'E',
            replace: true,
            scope: {
                config: '=',
                modeldata: '=',
                insert: '=?',
                api: '=?',
                addnew: "="
            },
            link: function (scope, element, attrs) {
                var table, div;
                scope.$watch('config', function (value) {
                    element.children().empty();
                    table = angular.element('<table id="' + attrs.gridid + '"></table>');
                    element.append(table);
                    if (attrs.pagerid) {
                        value.pager = '#' + attrs.pagerid;
                        var pager = angular.element(value.pager);
                        if (pager.length == 0) {
                            div = angular.element('<div id="' + attrs.pagerid + '"></div>');
                            element.append(div);
                        }
                    }
                    table.jqGrid(value);
                    //if (scope.addnew == true)
                    //{
                    table.jqGrid("inlineNav", '#' + attrs.pagerid, { addParams: { position: "last" } });
                    //}
                    // Variadic API – usage:
                    //   view:  <ng-jqgrid … vapi="apicall">
                    //   ctrl:  $scope.apicall('method', 'arg1', …);
                    scope.vapi = function () {
                        var args = Array.prototype.slice.call(arguments, 0);
                        return table.jqGrid.apply(table, args);
                    };
                    // allow to insert(), clear(), refresh() the grid from 
                    // outside (e.g. from a controller). Usage:
                    //   view:  <ng-jqgrid … api="gridapi">
                    //   ctrl:  $scope.gridapi.clear();
                    scope.api = {
                        insert: function (rows) {
                            if (rows) {
                                for (var i = 0; i < rows.length; i++) {
                                    scope.modeldata.push(rows[i]);
                                }
                                table.jqGrid('setGridParam', { data: scope.modeldata })
                                     .trigger('reloadGrid');
                            }
                        },
                        clear: function () {
                            scope.modeldata.length = 0;
                            table.jqGrid('clearGridData', { data: scope.modeldata })
                                .trigger('reloadGrid');
                        },
                        refresh: function () {
                            table
                                .jqGrid('clearGridData')
                                .jqGrid('setGridParam', { data: scope.modeldata })
                                .trigger('reloadGrid');
                        }
                    };
                });
                scope.$watch('data', function (value) {
                    table.jqGrid('setGridParam', { data: value })
                         .trigger('reloadGrid')
                    ;
                });
            }
        };
    });

 
	
    app.factory('tenantApi', ['$resource', function ($resource) {
        return $resource('/api/uac/tenant/:id', { id: '@tenant_id' }, {query: {method: 'GET', isArray: false}, update: {method:'put'} });
    }]);

     